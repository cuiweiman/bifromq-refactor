<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.zachary.bifromq</groupId>
        <artifactId>bifromq-refactor</artifactId>
        <version>0.1</version>
    </parent>

    <artifactId>base-cluster</artifactId>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!--
        环境变量提供者
            1. Java 中根据 接口类型 获取 其实现类
            2. 获取系统的 CPU 核数
            3. 提供 ThreadFactory 线程工厂
        -->
        <dependency>
            <groupId>com.zachary.bifromq</groupId>
            <artifactId>base-env-provider</artifactId>
        </dependency>
        <!--
        混合逻辑时钟
        用于实现 分布式的 数据一致性，为数据 merge 需求 提供 数据操作事件的先后顺序。
        解决逻辑时钟和物理时钟之间的差距，支持因果关系，同时又有物理时钟直观的特点。HLC是将物理时钟和逻辑时钟结合起来的一种算法。
        -->
        <dependency>
            <groupId>com.zachary.bifromq</groupId>
            <artifactId>base-hlc</artifactId>
        </dependency>
        <!--
        CRDT 分布式系统一致性实现方案
        https://crdt.tech/papers.html
        主要是 state-based crdt 的拓展 delta-state crdt，https://arxiv.org/abs/1603.01529
        抽象代数里的概念
        -->
        <dependency>
            <groupId>com.zachary.bifromq</groupId>
            <artifactId>base-crdt-store</artifactId>
        </dependency>
        <!--
        度量库：micrometer-core 包含了 度量 的核心功能
        为基于 JVM 的应用程序的性能监测数据收集提供了一个通用的 API，支持多种度量指标类型，
        这些指标可以用于观察、警报以及对应用程序当前状态做出响应。
        -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-core</artifactId>
        </dependency>
        <!-- google protobuf 编码 -->
        <dependency>
            <groupId>com.google.protobuf</groupId>
            <artifactId>protobuf-java-util</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.protobuf</groupId>
            <artifactId>protobuf-java</artifactId>
        </dependency>
        <!-- google guava -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>

        <!-- Netty 丰富的功能,如流量整形、native传输，各种应用层协议的codec，以及 Netty 全部的高级特性-->
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-all</artifactId>
        </dependency>

        <!--
        使用 kqueue 和 epoll 这种 native 的传输方式
        参考 CSDN 博文：https://blog.csdn.net/superfjj/article/details/125528819
        比 NIO 更快的 IO 方式，比如 kqueue 和 epoll，但是这两种方式需要 native 方法的支持，即 需要 操作系统支持
        如果在支持 Kqueue 或者 epoll 的服务器上，netty 可以提供对这些优秀IO的支持，需要调用本地的 native 方法
        Linux 中使用 EpollEventLoopGroup;EpollEventLoop;EpollServerSocketChannel;EpollSocketChannel；
        MacOS 中可以使用 KQueueEventLoopGroup;KQueueEventLoop;KQueueServerSocketChannel;KQueueSocketChannel；
        -->
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-transport-native-epoll</artifactId>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-transport-native-kqueue</artifactId>
        </dependency>

        <!--
        Netty 的 OpenSSL
        有两种实现机制：Dynamic linked 和 Statically Linked。
        在开发和测试环境中，建议使用 Statically Linked 的方式（netty-tcnative-boringssl-static），
        它提供了对 ALPN 的支持以及 HTTP/2 需要的密码算法，不需要额外再集成 Jetty 的 ALPN 类库。
        从 1.1.33.Fork16 版本开始支持所有的操作系统，可以实现跨平台运行。

        对于生产环境，则建议使用 Dynamic linked 的方式，原因如下：
        1. 很多场景下需要升级 OpenSSL 的版本或者打安全补丁，如果使用动态链接方式（例如 apt-ge），则应用软件不需要级联升级；
        2. 对于一些紧急的 OpenSSL 安全补丁，如果采用 Statically Linked 的方式，需要等待 Netty 社区提供新的静态编译补丁版本，可能会存在一定的滞后性。
        -->
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-tcnative-boringssl-static</artifactId>
        </dependency>

        <!-- RxJava 是响应式编程(Reactive Extensions)的java实现，它基于观察者模式的实现了异步编程接口。-->
        <dependency>
            <groupId>io.reactivex.rxjava3</groupId>
            <artifactId>rxjava</artifactId>
        </dependency>
        <!--单节点高性能缓存-->
        <dependency>
            <groupId>com.github.ben-manes.caffeine</groupId>
            <artifactId>caffeine</artifactId>
        </dependency>
        <!--日志API-->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>

        <!-- for testing-->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-inline</artifactId>
        </dependency>
        <!--
            接口自动化-使用 Awaitility 测试异步代码
            该工具提供轮询的方式，判断操作是否完成，以最短的时间获取异步任务结果。
            官方文档：https://github.com/awaitility/awaitility/wiki/Usage#usage-examples
        -->
        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>


    <build>
        <plugins>
            <!--protobuf 编译插件-->
            <plugin>
                <groupId>org.xolstice.maven.plugins</groupId>
                <artifactId>protobuf-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>